1. Start TemplateRenamer and rebuild.Copy .exe file to project files, start and rename
2. StartUp - ConfigureServices configure SendGrid email sender
3. Add model "Category" and register to ApplicationDbContex
4. Add model "Post" and register to ApplicationDbContex
5. Add model "Comment" and register to ApplicationDbContex
6. Add migration "AddInitialModels"
7. Show Categories to home page - Create viewmodel -IndexViewModel(Collection of categories) 
							      and IndexCategoryViewModel(name, title ... etc)
		-var. -I- get categories direct in controller /dbcontext
			Changes to index.html
		-var. -II- througn repository .Select(x => new IndexCategoryViewModel
		-var. -III- use CategoryService and use automapper To<IndexCategoryViewModel> -> 'add : IMapFrom<Category>' 
			on IndexCategoryViewModel
		-add property PostsCount to IndexCategoryViewModel -> automapper himself gessing that 
			'Category' has property 'Posts' and give Posts count
		-CategorySeeder -> Tupple<string Name, string ImgUrl>
8. Create Categories controller and view 'Byname', mapControllerRoute
9. CategoriesService - add method GetByName(string name)
10. Create CategoryViewModel and PostInCategoryViewModel
11. Create Post controller - Get and Post Create, PostCreateViewModel, CreateView created(content - textarea)
12. Create PostsService and extract interface,
	SERVICE DO NOT WORK WITH USERMANAGER
	RedirectToAction(nameof(this.ById), new { id = postId } name of 'id' must be same as parameter 'id' IActionResult ById(int id)
13. Integrate text redactor tinymce - copy settings to libman.json,	and <script src="/lib/tinymce/tinymce.min.js" type="text/javascript"....to create View
14. Dropdown menu - I - list of values -> IEnumerable<DropDownViewModel> to Create.cshtml through PostCreateInputModel
	DropDownViewModel map properties values IMapFrom<Category>, inject ICategoriesService to PostController
	In PostController/[httpget]Create - var viewModel= new PostCreateInputModel{Categories=categories} 
	and pass to this.View(viewModel)
	in View Create -> select tag, asp-for="CategoriyId" 
	and asp-items="Model.Categories.Select(x => new SelectListItem(x.Name, x.Id.ToString()))"(SelectListItems)
	-or : in PostCreateInputModel -> IEnumerable<SelectListItem>SelectCategories=>this.Categories
			.Select(x.Name, x.Id.ToString()) //install AspNetCore.Mvc.Rendering package
15. ShortContent property in PostInCategoryViewModel - remove tags from text(regex)
16. In view 'ByName' - <a asp-controller="Posts" asp-action="ById" asp-route-id="@post.Id">@post.Title</a> 
17. PostInCategory - WebUtility.HtmlDekode - fix nonbrakingspace 
18. Create PostViewModel and view 'ById.cshtml'(Model - PostViewModel) and (h1-Title, Content) , 
		Generate method 'GetById<T>(int id)' - IPostService and implement to PostService			
		PostsController - use created method to generate PostViewModel and return it in ById action
		tinyMce - send to db html - fix in view with '@Html.Raw(Model.Content)' -> XSS threat - htmlsanitizer
		Insatll htmlSanitazer nugetpackage - In PostViewModel property SanitazedContent => new HtmlSanitizer().Sanitize(this.Content);
		and in 'ById' - @Html.Raw(Model.SanitazedContent)
19. Download post view template with font awesome icons
20. Up and Down Vote buttons:
		- create Vote :BaseModel -> model : int PostId, Post Post, string UserId, AppUser User, VoteType(enum) Type
		- DbSet<Vote> to dbContext and create migration
		- controller 'Votes', with action Post(VoteInputModel) -> vote and count votes (VotesService)
		- 'ById' view - to add votesCount -> add property VotesCount to PostViewModel and 
		  add property ICollection<Vote> to 'Post' model
        -  PostViewModel - CustomMapping(VotesCount)
		- up and down button -> <a>href="" onclick="func()"</a>
		- section script - funcs. declare upVote() and downVote()
		- PostViewModel - create property Id and paste Model.Id as parameter at functions
		- 'ById'- upVote, downVote functions - var json object - { postId = postId, isUpVote = true/false }
		// AUTOMAPPER - ienumerable.asiQueryable.To<Model>
		// from Model to Post in Model -> IMapTo<Post>
21. XUnit test - InMemoryDatabase - install library Microsoft.EntityFrameworkCore.InMemory (simulate real database in PC memory)
			

		var options = new DbContextOptionsBuilder<ApplicationDbContext>()
                   .UseInMemoryDatabase(Guid.NewGuid().ToString());

        var repository = new EfRepository<Vote>(new ApplicationDbContext(options.Options));

        var service = new VotesService(repository);

22. Integration tests - installing Microsoft.AspNetCore.Mvc.Testing 
		var serverFactory = new WebApplicationFactory<Startup>();
        var client = serverFactory.CreateClient();

	'ITestOutputHelper output' field in test class, write in test explorer
	this test don't execute js in html 
23. Selenium - virtual browser - SPA apps

----1
	Kendo components,        HighCharts
----2
	IMemoryCache:
	MyFirstMvsApp -> services.AddMemoryCache() inject tp ctor IMemoryCache memoryCache, method TestCache()
    public IActionResult TestCache()
			 {
			     if (!memoryCache.TryGetValue<DateTime>("TimeNow", out var value))
			     {
			         value = DateTime.UtcNow;
			         memoryCache.Set("TimeNow", value, TimeSpan.FromMinutes(10));
			     }

			     return this.Ok(value);
			 }

				"""" memoryCache.Set("TimeNow", value, new MemoryCacheEntryOptions
			        {
			            Priority = CacheItemPriority.NeverRemove,
			            SlidingExpiration = new TimeSpan(0, 10, 10),
			        });
		
	IDistributedCache
		- Redis database
		App database:
			- services.AddDistributedMemoryCache(); use inMemory - stop app lose data
			- services.AddDistributedSqlServerCache - install Microsoft.Extensions.Caching.SqlServer
				services.AddDistributedSqlServerCache(options =>
				{
				    options.ConnectionString = this.configuration
				        .GetConnectionString("DefaultConnection");
				    options.SchemaName = "dbo";
				    options.TableName = "CacheRecords";
				});
	ResponseCache

24. Sessions - pass information betweem two actions, to use session must inmplement IDistributedCache,
	by default sessions are switched off
		services.AddDistributedCache();
		services.AddSession(options=>
		{
			oprions.IdleTimeOut = TimeSpan.FromSeconds(10);
			oprions.Cookie.HttpOnly() = true;
			oprions.Cookie.IsEssential = true;
		});
		...........
		app.UseSession();
		............
		this.HttpContext.Session.SetString("Name", "Bobi");
		............
		var value = HttpContext.Session.GetString("Name");

25. TempData - pass information betweem action and next action, tempdata is'nt Essential
		Posts/Create
			this.TempData["InfoMessage"] = "Forum Post Created";
			  this.RedirectToAction(nameof(this.ById)
		in ById view
			@if (this.TempData["InfoMessage"] != null)
			{
			    <div>
			        @this.TempData["InfoMessage"];
			    </div>
			}
---- Performance - ApplicationInsights, dotTrace
		-always async-await
		-enable Compression
			services.AddResponseCompression(options=>
            {
                options.EnableForHttps = true;
            });
			...................
			app.UseResponseCompression();
		-reduce httprequests - install BuildBundlerMinifier
			condigure in bundleConfig
26. CreatePost button to main page
	<a asp-controller="Posts" asp-action="Create" class="btn alert-info">Create new Forum Post</a>
	- from page source:
		<a class="btn alert-info" href="/Posts/Create">Create new Forum Post</a>
27. Pagination
	 - add route forumCategoryWithPage(added page parameter)
	 - in iPostService -> T GetByCategoryId<T>(int categoryId, int? take = null, int skip = 0); 
	 - in PostService -> take posts with categoryId All() or  query = query.Take(take.Value);
	 - in CategoryViewModel -> Rename property Posts to ForumPosts(automaper can't consider Skip() and Take())
	 - in PostService -> help method get PostCountByCategoryId and pull to IPostService
	 - in CategoryViewModel - property int CurrentPage. in categoriesController set viewModel.CurrentPage = page;
	 - ByName.cshtml copy bootstrap pagination and modified
28. Comments on Comment
	- in Comment - create properties 'public int? ParentId { get; set; }' and 'public Comment Parent { get; set; }'
	- applay migration
	- view Posts'ById' add comment form <div id="AddCommentForm style=display:none">...  add tinymce
		-'ById' - button -> onclick=showAddCommentForm()
		        - scripts section - function showAddCommentForm(){....}
				- <form asp-controller="Comments" asp-action=create method=post
					- <input type="submit" value="Add Comment" class="btn btn-"...
					- <input type="hidden" name="PostId" value="@this.Model.Id" /> // send PostId to controller
	- Create CommentsController
		- async method 'Create' on CommentsController - parameter - CommentCreateInputModel
		- add 'Comments' folder to webViewModels and 'CommentCreateInputModel' class
		- interface ICommentsService with method 'Create' and implement it to CommentService
		- register interface to Startup
		- inject ICommentsService to CommentsController and call method in CommentsController
		- add button to Views/Posts 'ById' - '+ Comment' -> 
			onclick this button show form <form asp-controller="Comments" asp-action="Create" method="post"...(tinymce text redactor)
			click on 'AddComment' send post request to CommentsController/Create
		-Create comment on coment for posts
			- in PostViewModel create property IEnumerable<PostCommentViewModel> Comments (as 'Comments' is a navigational property to comments in 'Post' model)
				and by virtue of autoMapper receive comment on given Post 
			- in Views/Posts 'ById' foreach(var comment in Model.Comments) - created property in PostViewModel
				- visualize comment use existing html -> dont forget to sanitize client input(tinimce is html)
			- <form id="AddCommentForm" - <input type="hidden" name="ParentId" value="0" />
			- @*comment view*@ call showAddCommentForm(0), @*reply view*@ call showAddCommentForm(@this.Model.Id) //parentID
			- function showAddCommentForm(parentId) set value -> { $("#AddCommentForm input[name='ParentId']").val(parentId);    
			- verify, that commentId and parentId are in same post
				- ICommentService -> bool IsInSamePost(int firstId, int secondId);
				- implement to CommentsService
				- defense from users foolishness - CommentsController -> if (parentId.HasValue){....}
		- Create  function 'ById' view - void DisplayComments(int? parentId) - recursive

29. Show DateTime to local time
	- anonimous function to script part in view,than <time datetime="@Model.CreatedOn.ToString("O")">

ViewComponent - when get data from db or service, when work with existing model - PartialView















